import { configureLocalization } from '@lit/localize';
import { sourceLocale, targetLocales } from '../../generated/locale-codes';
import { templates as deTemplates } from '../../generated/locales/de';
import { templates as enTemplates } from '../../generated/locales/en';
import { templates as skTemplates } from '../../generated/locales/sk';

/**
 * A map of localized templates for supported target locales (STATIC).
 *
 * This map associates each locale code (e.g., 'de', 'en', 'sk') with its corresponding
 * set of localized templates. These templates are generated by `lit-localize` and
 * contain translations for various UI strings.
 * 
 * It is static loading to have only one output file.
 * @see {@link https://lit.dev/docs/localization/runtime-mode/ | Lit Localize Runtime Docs}
 */
const localizedTemplates = new Map([
    ['de', deTemplates],
    ['en', enTemplates],
    ['sk', skTemplates]
]);

/**
 * Configures localization for the application.
 *
 * This configuration uses the `lit-localize` library to manage localization. It specifies
 * the source locale, target locales, and a function to load localized templates dynamically.
 */
export const { getLocale, setLocale } = configureLocalization({
    sourceLocale,
    targetLocales,
    loadLocale: async (locale: 'de' | 'en' | 'sk') => {
        const templates = localizedTemplates.get(locale);
        return { templates };
    },
});